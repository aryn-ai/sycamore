#!/usr/bin/python3

import sys
import struct
from typing import NamedTuple

FMT = "QQQQI48s"
SIZE = struct.calcsize(FMT)

class TimeTraceRec(NamedTuple):
    t0: int
    t1: int
    utime: int
    stime: int
    thread: int
    name: str

def buf_to_rec(buf) -> TimeTraceRec:
    tup = struct.unpack(FMT, buf)
    t0, t1, user, syst, thr, name = tup
    name = name.decode().rstrip('\0')
    return TimeTraceRec(t0, t1, user, syst, thr, name)

def tt_reader(paths: list[str]):
    for path in paths:
        with open(path, "rb") as fp:
            while True:
                buf = fp.read(SIZE)
                if not buf:
                    break
                yield buf_to_rec(buf)

class Cat:
    def run(self, paths):
        for rec in tt_reader(paths):
            t0 = rec.t0 / 1000000000.0
            wall = (rec.t1 - rec.t0) / 1000000000.0
            print(f"{t0} {rec.name} {wall}")


def main(args = None):
    if args is None:
        args = sys.argv[1:]
    cat = Cat()
    cat.run(args)
    return 0


if __name__ == "__main__":
    sys.exit(main())
