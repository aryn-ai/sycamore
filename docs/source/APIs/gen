#!/usr/bin/python3

"""
Auto-generate RST files from Python source.

Usage: ./gen
"""

import os
import sys
import ast


srcRoot = "../../../lib/sycamore/sycamore"
docRoot = "."


def shouldEmit(node):
    if not isinstance(node, ast.ClassDef):
        return False
    if ast.get_docstring(node):
        return True
    for base in node.bases:
        if base.id == "ABC":
            return False  # skip abstract base classes
    return True


def doFile(name, dir, ent):
    with open(f"{dir}/{ent}") as fp:
        top = ast.parse(fp.read())

    ary = []
    base = ent[:-3]
    for node in top.body:  # iterate module-level nodes only
        if shouldEmit(node):
            ary.append(f"sycamore.{name}.{base}.{node.name}")

    if ary:
        with open(f"{docRoot}/{name}/{base}.rst", "w") as fp:
            title = base.replace("_", " ").title()
            line = "=" * len(title)
            fp.write(f"{title}\n{line}\n\n")
            for sym in sorted(ary):
                fp.write(f".. autoclass:: {sym}\n   :members:\n   :show-inheritance:\n")
        print(f"   /APIs/{name}/{base}.rst")


def doDir(name):
    dir = f"{srcRoot}/{name}"
    for ent in sorted(os.listdir(dir)):
        if not ent.endswith(".py"):
            continue
        doFile(name, dir, ent)


def main():
    doDir("transforms")
    return 0


if __name__ == "__main__":
    sys.exit(main())
