[tool.poetry]
name = "sycamore-monorepo"
version = "0.0.1"
description = "Sycamore is an LLM-powered semantic data preparation system for building search applications."
authors = ["aryn.ai <opensource@aryn.ai>"]
readme = "README.md"
repository = "https://github.com/aryn-ai/sycamore.git"


[tool.poetry.urls]
"Repository" = "https://github.com/aryn-ai/sycamore.git"
"Documentation" = "https://sycamore.readthedocs.io"

[tool.poetry.dependencies]
# streamlit in query-ui disallows 3.9.7
python = ">=3.9,<3.9.7 || >3.9.7,<3.13"

sycamore-ai = "^0.1.13"

# Dependencies for building docs. Defined as an extra
# so they can be installed using pip on RTD.
furo = { version = "^2023.9.10", optional = true }
myst-parser = { version = "^2.0.0", optional = true }
sphinx = { version = "^7.2.5", optional = true }
rouge = "^1.0.1"


[tool.poetry.group.test.dependencies]
flake8 = "4.0.1"
pytest = "^7.4"
pytest-mock = "^3.11"

[tool.poetry.group.dev.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras=["eval", "duckdb", "elasticsearch", "neo4j", "opensearch", "pinecone", "weaviate", "local-inference", "legacy-partitioners"] }
sycamore-crawler = { path = "apps/crawler", develop = true }
remote-processors = { path = "lib/remote-processors", develop = true }
integration = { path = "apps/integration", develop = true }
sycamore-poetry-lock = { path = "lib/poetry-lock", develop = true }
aryn-sdk = { path = "lib/aryn-sdk", develop = true }
queryui = { path = "apps/query-ui", develop = true }
query-demo = { path = "apps/query-demo", develop = true }
ruff = "^0.0.287"
black = "^24.4"
pre-commit = "^3.4.0"
mypy = "^1.11.0"
nbmake = "^1.4.5"

[tool.poetry.group.notebook.dependencies]
jupyterlab = "^4.0.11"
jupyter-lsp = "^2.2.2"
ipywidgets = "^8.1.0"
notebook = "^7.1.2"

[tool.poetry.extras]
docs = ["furo", "myst-parser", "sphinx"]

[tool.ruff]
line-length = 120

[tool.black]
line-length = 120

[mypy]
mypy_path = "apps/crawler/crawler/s3:apps/crawler/crawler/http"
explicit_package_bases = true

[tool.mypy]
exclude = ["notebooks", "docs"]
ignore_missing_imports = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
pythonpath = ["."]

[tool.poetry-autolock.dependents]
integration = "apps/integration"

### These are here so that docker containers can do poetry install --only <thing> and get it installed.
### Using multiple pyproject.toml files and symlinking the virtual envs together caused packages to
### be installed and uninstalled when moving between directories.  Not symlinking the virtual envs
### causes duplication.

[tool.poetry.group.query-ui.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["opensearch"] }
streamlit = "^1.36.0"
streamlit-ace = "^0.1.1"
streamlit-agraph = "^0.0.45"

### BEGIN Auto-generated by autogen-groups.py
[tool.poetry.group.docs.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["docs"] }

[tool.poetry.group.duckdb.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["duckdb"] }

[tool.poetry.group.elasticsearch.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["elasticsearch"] }

[tool.poetry.group.eval.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["eval"] }

[tool.poetry.group.legacy-partitioners.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["legacy-partitioners"] }

[tool.poetry.group.local-inference.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["local-inference"] }

[tool.poetry.group.neo4j.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["neo4j"] }

[tool.poetry.group.opensearch.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["opensearch"] }

[tool.poetry.group.pinecone.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["pinecone"] }

[tool.poetry.group.weaviate.dependencies]
sycamore-ai = { path = "lib/sycamore", develop = true, extras = ["weaviate"] }

# END Auto-generated by autogen-groups.py
